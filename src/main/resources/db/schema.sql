-- drop table if exists user_friends;
-- drop table if exists film_likes;
-- drop table if exists film_genres;
-- drop table if exists genres;
-- drop table if exists users;
-- drop table if exists films;
-- drop table if exists RATING;

create table if not exists rating(
    id INTEGER GENERATED BY DEFAULT AS IDENTITY,
    rating_mpa VARCHAR(5),
    CONSTRAINT rating_id PRIMARY KEY (id)
);

create table if not exists films(
    id BIGINT GENERATED BY DEFAULT AS IDENTITY,
    name varchar not null,
    description varchar(200),
    release_date Date,
    duration BIGINT,
    mpa INTEGER,
    CONSTRAINT film_id PRIMARY KEY (id)
);

create table if not exists users(
    id BIGINT GENERATED BY DEFAULT AS IDENTITY,
    email varchar not null ,
    login varchar not null ,
    name varchar,
    birthday timestamp,
    CONSTRAINT user_id PRIMARY KEY (id)
);

create table if not exists genres(
    id INTEGER GENERATED BY DEFAULT AS IDENTITY,
    name varchar,
    CONSTRAINT genre_id PRIMARY KEY (id)
);

create table if not exists film_genres(
    film_id BIGINT not null,
    genre_id INTEGER not null,
    primary key (film_id, genre_id),
    CONSTRAINT fk_film_id
        FOREIGN KEY(film_id)
            REFERENCES films(id) on delete cascade,
    CONSTRAINT fk_genre_id
        FOREIGN KEY(genre_id)
            REFERENCES genres(id) on delete cascade
);
-- ON UPDATE RESTRICT
create table if not exists film_likes(
    film_id BIGINT not null,
    user_id BIGINT not null,
    primary key (film_id, user_id),
    CONSTRAINT fk_film_likes_id
        FOREIGN KEY(film_id)
            REFERENCES films(id) on delete cascade,
    CONSTRAINT fk_user_likes_id
        FOREIGN KEY(user_id)
            REFERENCES users(id) on delete cascade
);

create table if not exists user_friends(
    user_id BIGINT not null ,
    friend_id BIGINT not null,
    primary key (user_id, friend_id),
    CONSTRAINT fk_fiends_user_id
        FOREIGN KEY(user_id)
            REFERENCES users(id) on delete cascade,
    CONSTRAINT fk_other_user_id
        FOREIGN KEY(friend_id)
            REFERENCES users(id) on delete cascade
);